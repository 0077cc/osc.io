{"google":"UA-37581591-1","body":"# osc.io\r\n\r\nosc.io proxies osc messages from standard sockets to the browser using socket.io.\r\n\r\n## installation\r\n\r\n```\r\n$ npm install osc.io\r\n```\r\n\r\n## configuration\r\n\r\nto expose the proper endpoints from the server, you must pass your socket.io instance to osc.io.\r\n\r\n```\r\nvar http = require('http'),\r\n  socketio = require('socket.io'),\r\n  osc = require('osc.io'),\r\n  server = http.createServer(),\r\n  io = socketio.listen(server);\r\n\r\nosc(io);\r\nserver.listen(80);\r\n```\r\n\r\nthis will create two socket.io namespaces, `/osc/servers/:port` and `/osc/clients/:port`, to manage osc servers and osc clients respectively. possible port values are restricted to `6000` to `12000`. each namespace can listen or emit `message` events to receive and send osc messages.\r\n\r\nin the example below, we create an osc client/server in the browser and send messages from one to the other. of course, the client or server could be any osc device.\r\n\r\n```\r\nvar server = io.connect('http://localhost/osc/servers/8000'),\r\n  client = io.connect('http://localhost/osc/clients/8000');\r\n\r\nserver.on('message', function(message) {\r\n  console.log(message);\r\n});\r\n\r\nsetInterval(function() {\r\n  client.emit('message', ['/osc/test', 200]);\r\n}, 500);\r\n```\r\n\r\nby default, client devices broadcast to 127.0.0.1. to modify the host value of a client, your client must emit a message containing the host.\r\n\r\n```\r\nclient.emit('set-host', DEVICE_IP);\r\n```\r\n\r\n## todo\r\n\r\n- to enable multiple clients and servers, port must be passed in through the socket namespace to ensure each device has a unique client socket (socket.io creates only one socket per namespace). host cannot be passed in like port, since socket.io does not allow for variable namespace names. this makes creating a graceful connection api difficult. a proper api for managing device hosts and ports would be nice.\r\n\r\n- with socket.io lacking variable namespaces, i decided to create hannel name handlers only for ports 6000 - 12000 because i am afraid to see what happens if i create 6x,xxx channels. ideally, i'd like to handle truly variable port values.","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Osc.io","tagline":"send and receive osc messages via socket.io"}